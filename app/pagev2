'use client';
import MintButton from "@/components/MintButton";
import React, { useEffect, useState } from "react";
import * as fabric from 'fabric';
import { FabricJSCanvas, useFabricJSEditor } from "fabricjs-react";
import { NextPage } from 'next';
import WalletContextProvider from '../components/WalletContextProvider';
import { AppBar } from '../components/AppBar';
import { BalanceDisplay } from '../components/BalanceDisplay';
import { PingButton } from '../components/PingButton';
import Head from 'next/head';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { Transaction } from "@solana/web3.js";

export default function App() {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();
  const { editor, onReady } = useFabricJSEditor();

  const history = [];
  const [color, setColor] = useState("#35363a");
  const [cropImage, setCropImage] = useState(true);

  useEffect(() => {
    if (!editor || !fabric) {
      return;
    }

    // Initialize free drawing brush
    editor.canvas.freeDrawingBrush = new fabric.PencilBrush(editor.canvas);
    editor.canvas.freeDrawingBrush.color = color;
    editor.canvas.freeDrawingBrush.width = 5;

    if (cropImage) {
      editor.canvas.__eventListeners = {};
      return;
    }

    if (!editor.canvas.__eventListeners["mouse:wheel"]) {
      editor.canvas.on("mouse:wheel", function(opt) {
        var delta = opt.e.deltaY;
        var zoom = editor.canvas.getZoom();
        zoom *= 0.999 ** delta;
        if (zoom > 20) zoom = 20;
        if (zoom < 0.01) zoom = 0.01;
        editor.canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);
        opt.e.preventDefault();
        opt.e.stopPropagation();
      });
    }

    if (!editor.canvas.__eventListeners["mouse:down"]) {
      editor.canvas.on("mouse:down", function(opt) {
        var evt = opt.e;
        if (evt.ctrlKey === true) {
          this.isDragging = true;
          this.selection = false;
          this.lastPosX = evt.clientX;
          this.lastPosY = evt.clientY;
        }
      });
    }

    if (!editor.canvas.__eventListeners["mouse:move"]) {
      editor.canvas.on("mouse:move", function(opt) {
        if (this.isDragging) {
          var e = opt.e;
          var vpt = this.viewportTransform;
          vpt[4] += e.clientX - this.lastPosX;
          vpt[5] += e.clientY - this.lastPosY;
          this.requestRenderAll();
          this.lastPosX = e.clientX;
          this.lastPosY = e.clientY;
        }
      });
    }

    if (!editor.canvas.__eventListeners["mouse:up"]) {
      editor.canvas.on("mouse:up", function(opt) {
        this.setViewportTransform(this.viewportTransform);
        this.isDragging = false;
        this.selection = true;
      });
    }

    editor.canvas.renderAll();
  }, [editor]);

  const addBackground = () => {
    if (!editor || !fabric) {
      return;
    }

    fabric.Image.fromURL(
      "https://thegraphicsfairy.com/wp-content/uploads/2019/02/Anatomical-Heart-Illustration-Black-GraphicsFairy.jpg",
      (image) => {
        editor.canvas.setBackgroundImage(
          image,
          editor.canvas.renderAll.bind(editor.canvas)
        );
      }
    );
  };

  const fromSvg = () => {
    fabric.loadSVGFromString(
      `<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="500" height="500" viewBox="0 0 500 500" xml:space="preserve">
    <desc>Created with Fabric.js 5.3.0</desc>
    <defs>
    </defs>
    <g transform="matrix(1 0 0 1 662.5 750)"  >
      <image style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;"  xlink:href="https://thegraphicsfairy.com/wp-content/uploads/2019/02/Anatomical-Heart-Illustration-Black-GraphicsFairy.jpg" x="-662.5" y="-750" width="1325" height="1500"></image>
    </g>
    <g transform="matrix(1 0 0 1 120.5 120.5)"  >
    <circle style="stroke: rgb(53,54,58); stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,255,255); fill-opacity: 0; fill-rule: nonzero; opacity: 1;"  cx="0" cy="0" r="20" />
    </g>
    <g transform="matrix(1 0 0 1 245.5 200.5)"  >
    <line style="stroke: rgb(53,54,58); stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;"  x1="-75" y1="-50" x2="75" y2="50" />
    </g>
    <g transform="matrix(1 0 0 1 141.4 220.03)" style=""  >
        <text xml:space="preserve" font-family="Arial" font-size="16" font-style="normal" font-weight="normal" style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(53,54,58); fill-rule: nonzero; opacity: 1; white-space: pre;" ><tspan x="-16.9" y="-5.46" >inset</tspan><tspan x="-16.9" y="15.51" >text</tspan></text>
    </g>
    <g transform="matrix(1 0 0 1 268.5 98.5)"  >
    <rect style="stroke: rgb(53,54,58); stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: rgb(255,255,255); fill-opacity: 0; fill-rule: nonzero; opacity: 1;"  x="-20" y="-20" rx="0" ry="0" width="40" height="40" />
    </g>
    </svg>`,
      (objects, options) => {
        editor.canvas._objects.splice(0, editor.canvas._objects.length);
        editor.canvas.backgroundImage = objects[0];
        const newObj = objects.filter((_, index) => index !== 0);
        newObj.forEach((object) => {
          editor.canvas.add(object);
        });

        editor.canvas.renderAll();
      }
    );
  };

  const [modalShow, setModalShow] = useState(false);
  const publish = () => {
    setModalShow(true);
    return;
  };

  useEffect(() => {
    if (!editor || !fabric) {
      return;
    }
    editor.canvas.setHeight(500);
    editor.canvas.setWidth(500);
    addBackground();
    editor.canvas.renderAll();
  }, [editor?.canvas.backgroundImage]);

  const toggleSize = () => {
    if (!editor || !editor.canvas.freeDrawingBrush) {
      return;
    }
    editor.canvas.freeDrawingBrush.width = editor.canvas.freeDrawingBrush.width === 12 ? 5 : 12;
  };

  useEffect(() => {
    if (!editor || !fabric || !editor.canvas.freeDrawingBrush) {
      return;
    }
    editor.canvas.freeDrawingBrush.color = color;
  }, [color, editor]);

  const handleKeyDown = (e) => {
    if (e.key === "Delete") {
      removeSelectedObject();
    }
  };

  useEffect(() => {
    if (!editor || !fabric) {
      return;
    }
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [editor]);

  const toggleDraw = () => {
    if (!editor || !editor.canvas) {
      return;
    }
    editor.canvas.isDrawingMode = !editor.canvas.isDrawingMode;
  };

  const undo = () => {
    if (editor.canvas._objects.length > 0) {
      history.push(editor.canvas._objects.pop());
    }
    editor.canvas.renderAll();
  };

  const redo = () => {
    if (history.length > 0) {
      editor.canvas.add(history.pop());
    }
  };

  const clear = () => {
    editor.canvas._objects.splice(0, editor.canvas._objects.length);
    history.splice(0, history.length);
    editor.canvas.renderAll();
  };

  const removeSelectedObject = () => {
    editor.canvas.remove(editor.canvas.getActiveObject());
  };

  const onAddCircle = () => {
    if (!editor || !fabric) {
      return;
    }
    const circle = new fabric.Circle({
      radius: 20,
      fill: 'transparent',
      stroke: color,
      strokeWidth: 1,
      left: 100,
      top: 100,
    });
    const line = new fabric.Line([50, 100, 200, 100], {
      stroke: color,
      strokeWidth: 1,
    });
    editor.canvas.add(circle);
    editor.canvas.add(line);
  };

  const onAddRectangle = () => {
    if (!editor || !fabric) {
      return;
    }
    const rect = new fabric.Rect({
      width: 40,
      height: 40,
      fill: 'transparent',
      stroke: color,
      strokeWidth: 1,
      left: 100,
      top: 100,
    });
    editor.canvas.add(rect);
  };

  const addText = () => {
    if (!editor || !fabric) {
      return;
    }
    const text = new fabric.Textbox('inset text', {
      left: 100,
      top: 100,
      width: 150,
      fontSize: 16,
      fontFamily: 'Arial',
      fill: color,
    });
    editor.canvas.add(text);
  };

  const exportSVG = () => {
    const svg = editor.canvas.toSVG();
    console.info(svg);
  };

  const [isOpen, setIsOpen] = useState(true);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
  });

  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!publicKey) {
      alert("Please connect your wallet first.");
      return;
    }

    const res = await fetch("/api/mint", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ownerId: formData.email, img: editor.canvas.toSVG(), tran: sendTransaction }),
    });
    const data = await res.json();
    console.log("Response from backend:", data);
    const b64tx = data.transaction;
    console.log("Base64 Transaction string:", b64tx);

    if (!b64tx || typeof b64tx !== "string") {
      throw new Error("Invalid transaction received from backend");
    }

    const tx = Transaction.from(Buffer.from(b64tx, "base64"));
    const signature = await sendTransaction(tx, connection);
    await connection.confirmTransaction(signature, "confirmed");

    console.log("✅ NFT minted:", signature);
  };

  return (
    <div className="flex h-screen w-screen bg-gray-50 font-sans">
      <AppBar />
      {/* Sidebar Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="absolute top-16 left-4 z-20 bg-white text-gray-600 p-2 rounded-md shadow-md hover:bg-gray-100 transition"
      >
        {isOpen ? (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7" />
          </svg>
        ) : (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
          </svg>
        )}
      </button>

      {/* Sidebar */}
      <div
        className={`h-full flex flex-col w-72 bg-white shadow-lg border-r border-gray-200 transition-transform duration-300 ${isOpen ? "translate-x-0" : "-translate-x-full"}`}
      >
        <div className="p-4 border-b border-gray-200">
          <h2 className="text-sm font-semibold text-gray-800">Tools</h2>
        </div>
        <div className="flex-1 overflow-y-auto p-2 space-y-2">
          <button
            onClick={onAddCircle}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" strokeWidth="2" />
            </svg>
            Add Circle
          </button>
          <button
            onClick={onAddRectangle}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <rect x="3" y="3" width="18" height="18" strokeWidth="2" />
            </svg>
            Add Rectangle
          </button>
          <button
            onClick={addText}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
            </svg>
            Add Text
          </button>
          <button
            onClick={toggleDraw}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 5l-4 4 4 4" />
            </svg>
            Toggle Draw
          </button>
          <button
            onClick={clear}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            Clear
          </button>
          <button
            onClick={undo}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" />
            </svg>
            Undo
          </button>
          <button
            onClick={redo}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 9l6-6m0 0l-6 6m6-6H9a6 6 0 000 12h3" />
            </svg>
            Redo
          </button>
          <button
            onClick={toggleSize}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h7" />
            </svg>
            Toggle Size
          </button>
          <button
            onClick={removeSelectedObject}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete
          </button>
          <button
            onClick={() => setCropImage(!cropImage)}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5h7m0 0v7m-7-7L3 21m18 0h-7m7 0v-7" />
            </svg>
            Crop
          </button>
          <div className="px-3 py-2">
            <input
              disabled={!cropImage}
              type="color"
              value={color}
              onChange={(e) => setColor(e.target.value)}
              className="w-full h-8 rounded-md disabled:opacity-50"
            />
          </div>
          <button
            onClick={exportSVG}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
            </svg>
            Export SVG
          </button>
          <button
            onClick={fromSvg}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
            </svg>
            Import SVG
          </button>
          <button
            onClick={publish}
            disabled={!cropImage}
            className="w-full flex items-center px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-md text-sm transition disabled:opacity-50"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 0116 8h1a5.006 5.006 0 015 5v7a2 2 0 01-2 2H7a2 2 0 01-2-2v-4" />
            </svg>
            Publish to User Account
          </button>
        </div>
      </div>

      {/* Main Canvas Area */}
      <div className="flex-1 h-full flex items-center justify-center bg-gray-100">
        <div
          className={`border-2 ${cropImage ? "border-solid border-gray-300" : "border-dashed border-gray-400"} rounded-lg shadow-sm overflow-hidden`}
        >
          <FabricJSCanvas className="sample-canvas" onReady={onReady} />
        </div>
      </div>

      {/* Modal */}
      {modalShow && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl w-96 p-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">Publish Your Design</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">Name</label>
                <input
                  name="name"
                  placeholder="Enter your name"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full border border-gray-300 p-2 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Email</label>
                <input
                  name="email"
                  placeholder="Enter your email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full border border-gray-300 p-2 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  type="button"
                  onClick={() => setModalShow(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100 transition"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
